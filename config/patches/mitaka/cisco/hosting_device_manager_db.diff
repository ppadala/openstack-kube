--- hosting_device_manager_db.orig.py	2016-08-08 10:04:59.000000000 +0100
+++ hosting_device_manager_db.patch.py	2016-08-08 10:10:56.000000000 +0100
@@ -34,11 +34,10 @@
 from sqlalchemy.orm import joinedload
 from sqlalchemy.sql import expression as expr
 
-from networking_cisco._i18n import _, _LE, _LI, _LW
-
 from neutron.common import exceptions as n_exc
 from neutron.common import utils
 from neutron import context as neutron_context
+from neutron.i18n import _LE, _LI, _LW
 from neutron import manager
 from neutron.plugins.common import constants as svc_constants
 
@@ -117,7 +116,7 @@
         if cls._keystone_session:
             return cls._keystone_session
         else:
-            auth_url = cfg.CONF.keystone_authtoken.auth_url + "/v3"
+            auth_url = cfg.CONF.keystone_authtoken.auth_url # + "/v3"
             # user = cfg.CONF.keystone_authtoken.admin_user
             # pw = cfg.CONF.keystone_authtoken.admin_password
             # project_name = cfg.CONF.keystone_authtoken.admin_tenant_name
@@ -125,23 +124,25 @@
             user = cfg.CONF.keystone_authtoken.username
             pw = cfg.CONF.keystone_authtoken.password
             project_name = cfg.CONF.general.l3_admin_tenant
-            user_domain_id = (cfg.CONF.keystone_authtoken.user_domain_id or
+            user_domain_name = (cfg.CONF.keystone_authtoken.user_domain_name or
                               'default')
-            project_domain_id = (cfg.CONF.keystone_authtoken.project_domain_id
+            project_domain_name = (cfg.CONF.keystone_authtoken.project_domain_name
                                  or 'default')
-            auth = v3.Password(auth_url=auth_url,
+
+            auth = v3.Password(auth_url,
                                username=user,
                                password=pw,
                                project_name=project_name,
-                               user_domain_id=user_domain_id,
-                               project_domain_id=project_domain_id)
-            cls._keystone_session = session.Session(auth=auth)
+                               user_domain_name=user_domain_name,
+                               project_domain_name=project_domain_name)
+            cls._keystone_session = session.Session(auth=auth, verify=False)
+
         return cls._keystone_session
 
     @property
     def svc_vm_mgr(self):
         if self._svc_vm_mgr_obj is None:
-            if hasattr(cfg.CONF.keystone_authtoken, 'project_domain_id'):
+            if hasattr(cfg.CONF.keystone_authtoken, 'project_domain_name'):
                 self._svc_vm_mgr_obj = service_vm_lib.ServiceVMManager(
                     is_auth_v3=True,
                     keystone_session=self._keystone_auth_session())
@@ -179,23 +180,42 @@
 
     @classmethod
     def _get_tenant_id_using_keystone_v3(cls):
+
         keystone = client.Client(session=cls._keystone_auth_session())
-        try:
-            tenant = keystone.projects.find(
-                name=cfg.CONF.general.l3_admin_tenant)
-        except k_exceptions.NotFound:
-            LOG.error(_LE('No tenant with a name or ID of %s exists.'),
-                      cfg.CONF.general.l3_admin_tenant)
-        except k_exceptions.NoUniqueMatch:
-            LOG.error(_LE('Multiple tenants matches found for %s'),
-                      cfg.CONF.general.l3_admin_tenant)
-        return tenant.id
+        #try:
+
+        ##################################
+        #
+        # Patched to use auth.projects for
+        # V3 policy compatibility
+        #
+        # Other changes to use _domain_name
+        # instead of _domain_id
+        #
+        ##################################
+
+        available_projects = keystone.auth.projects()
+
+        for project in available_projects:
+            if project.name == cfg.CONF.general.l3_admin_tenant:
+                return project.id
+
+        #    tenant = keystone.projects.find(
+        #        name=cfg.CONF.general.l3_admin_tenant)
+        # except k_exceptions.NotFound:
+        #   LOG.error(_LE('No tenant with a name or ID of %s exists.'),
+        #              cfg.CONF.general.l3_admin_tenant)
+        #except k_exceptions.NoUniqueMatch:
+        #    LOG.error(_LE('Multiple tenants matches found for %s'),
+        #              cfg.CONF.general.l3_admin_tenant)
+
+        return None
 
     @classmethod
     def l3_tenant_id(cls):
         """Returns id of tenant owning hosting device resources."""
         if cls._l3_tenant_uuid is None:
-            if hasattr(cfg.CONF.keystone_authtoken, 'project_domain_id'):
+            if hasattr(cfg.CONF.keystone_authtoken, 'project_domain_name'):
                 # TODO(sridar): hack for now to determing if keystone v3
                 # API is to be used.
                 cls._l3_tenant_uuid = cls._get_tenant_id_using_keystone_v3()
